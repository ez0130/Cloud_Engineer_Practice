PS C:\Users\user> aws ==version

usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
To see help text, you can run:

  aws help
  aws <command> help
  aws <command> <subcommand> help

aws: error: argument command: Invalid choice, valid choices are:

accessanalyzer                           | account
acm                                      | acm-pca
amp                                      | amplify
amplifybackend                           | amplifyuibuilder
apigateway                               | apigatewaymanagementapi
apigatewayv2                             | appconfig
appconfigdata                            | appfabric
appflow                                  | appintegrations
application-autoscaling                  | application-insights
application-signals                      | applicationcostprofiler
appmesh                                  | apprunner
appstream                                | appsync
apptest                                  | arc-zonal-shift
artifact                                 | athena
auditmanager                             | autoscaling
autoscaling-plans                        | b2bi
backup                                   | backup-gateway
backupsearch                             | batch
bcm-data-exports                         | bcm-pricing-calculator
bedrock                                  | bedrock-agent
bedrock-agent-runtime                    | bedrock-data-automation
bedrock-data-automation-runtime          | bedrock-runtime
billing                                  | billingconductor
braket                                   | budgets
ce                                       | chatbot
chime                                    | chime-sdk-identity
chime-sdk-media-pipelines                | chime-sdk-meetings
chime-sdk-messaging                      | chime-sdk-voice
cleanrooms                               | cleanroomsml
cloud9                                   | cloudcontrol
clouddirectory                           | cloudformation
cloudfront                               | cloudfront-keyvaluestore
cloudhsm                                 | cloudhsmv2
cloudsearch                              | cloudsearchdomain
cloudtrail                               | cloudtrail-data
cloudwatch                               | codeartifact
codebuild                                | codecatalyst
codecommit                               | codeconnections
codeguru-reviewer                        | codeguru-security
codeguruprofiler                         | codepipeline
codestar-connections                     | codestar-notifications
cognito-identity                         | cognito-idp
cognito-sync                             | comprehend
comprehendmedical                        | compute-optimizer
connect                                  | connect-contact-lens
connectcampaigns                         | connectcampaignsv2
connectcases                             | connectparticipant
controlcatalog                           | controltower
cost-optimization-hub                    | cur
customer-profiles                        | databrew
dataexchange                             | datapipeline
datasync                                 | datazone
dax                                      | deadline
detective                                | devicefarm
devops-guru                              | directconnect
discovery                                | dlm
dms                                      | docdb
docdb-elastic                            | drs
ds                                       | ds-data
dsql                                     | dynamodb
dynamodbstreams                          | ebs
ec2                                      | ec2-instance-connect
ecr                                      | ecr-public
ecs                                      | efs
eks                                      | eks-auth
elasticache                              | elasticbeanstalk
elastictranscoder                        | elb
elbv2                                    | emr
emr-containers                           | emr-serverless
entityresolution                         | es
events                                   | evidently
finspace                                 | finspace-data
firehose                                 | fis
fms                                      | forecast
forecastquery                            | frauddetector
freetier                                 | fsx
gamelift                                 | gameliftstreams
geo-maps                                 | geo-places
geo-routes                               | glacier
globalaccelerator                        | glue
grafana                                  | greengrass
greengrassv2                             | groundstation
guardduty                                | health
healthlake                               | iam
identitystore                            | imagebuilder
importexport                             | inspector
inspector-scan                           | inspector2
internetmonitor                          | invoicing
iot                                      | iot-data
iot-jobs-data                            | iot-managed-integrations
iotanalytics                             | iotdeviceadvisor
iotevents                                | iotevents-data
iotfleethub                              | iotfleetwise
iotsecuretunneling                       | iotsitewise
iotthingsgraph                           | iottwinmaker
iotwireless                              | ivs
ivs-realtime                             | ivschat
kafka                                    | kafkaconnect
kendra                                   | kendra-ranking
keyspaces                                | kinesis
kinesis-video-archived-media             | kinesis-video-media
kinesis-video-signaling                  | kinesis-video-webrtc-storage
kinesisanalytics                         | kinesisanalyticsv2
kinesisvideo                             | kms
lakeformation                            | lambda
launch-wizard                            | lex-models
lex-runtime                              | lexv2-models
lexv2-runtime                            | license-manager
license-manager-linux-subscriptions      | license-manager-user-subscriptions
lightsail                                | location
logs                                     | lookoutequipment
lookoutmetrics                           | lookoutvision
m2                                       | machinelearning
macie2                                   | mailmanager
managedblockchain                        | managedblockchain-query
marketplace-agreement                    | marketplace-catalog
marketplace-deployment                   | marketplace-entitlement
marketplace-reporting                    | marketplacecommerceanalytics
mediaconnect                             | mediaconvert
medialive                                | mediapackage
mediapackage-vod                         | mediapackagev2
mediastore                               | mediastore-data
mediatailor                              | medical-imaging
memorydb                                 | meteringmarketplace
mgh                                      | mgn
migration-hub-refactor-spaces            | migrationhub-config
migrationhuborchestrator                 | migrationhubstrategy
mq                                       | mturk
mwaa                                     | neptune
neptune-graph                            | neptunedata
network-firewall                         | networkflowmonitor
networkmanager                           | networkmonitor
notifications                            | notificationscontacts
oam                                      | observabilityadmin
omics                                    | opensearch
opensearchserverless                     | opsworks
opsworkscm                               | organizations
osis                                     | outposts
panorama                                 | partnercentral-selling
payment-cryptography                     | payment-cryptography-data
pca-connector-ad                         | pca-connector-scep
pcs                                      | personalize
personalize-events                       | personalize-runtime
pi                                       | pinpoint
pinpoint-email                           | pinpoint-sms-voice
pinpoint-sms-voice-v2                    | pipes
polly                                    | pricing
privatenetworks                          | proton
qapps                                    | qbusiness
qconnect                                 | qldb
qldb-session                             | quicksight
ram                                      | rbin
rds                                      | rds-data
redshift                                 | redshift-data
redshift-serverless                      | rekognition
repostspace                              | resiliencehub
resource-explorer-2                      | resource-groups
resourcegroupstaggingapi                 | robomaker
rolesanywhere                            | route53
route53-recovery-cluster                 | route53-recovery-control-config
route53-recovery-readiness               | route53domains
route53profiles                          | route53resolver
rum                                      | s3control
s3outposts                               | s3tables
sagemaker                                | sagemaker-a2i-runtime
sagemaker-edge                           | sagemaker-featurestore-runtime
sagemaker-geospatial                     | sagemaker-metrics
sagemaker-runtime                        | savingsplans
scheduler                                | schemas
sdb                                      | secretsmanager
security-ir                              | securityhub
securitylake                             | serverlessrepo
service-quotas                           | servicecatalog
servicecatalog-appregistry               | servicediscovery
ses                                      | sesv2
shield                                   | signer
simspaceweaver                           | sms
snow-device-management                   | snowball
sns                                      | socialmessaging
sqs                                      | ssm
ssm-contacts                             | ssm-guiconnect
ssm-incidents                            | ssm-quicksetup
ssm-sap                                  | sso
sso-admin                                | sso-oidc
stepfunctions                            | storagegateway
sts                                      | supplychain
support                                  | support-app
swf                                      | synthetics
taxsettings                              | textract
timestream-influxdb                      | timestream-query
timestream-write                         | tnb
transcribe                               | transfer
translate                                | trustedadvisor
verifiedpermissions                      | voice-id
vpc-lattice                              | waf
waf-regional                             | wafv2
wellarchitected                          | wisdom
workdocs                                 | workmail
workmailmessageflow                      | workspaces
workspaces-thin-client                   | workspaces-web
xray                                     | s3api
s3                                       | ddb
configure                                | deploy
configservice                            | opsworks-cm
history                                  | cli-dev
help

PS C:\Users\user> aws configure
AWS Access Key ID [None]: ^^
AWS Secret Access Key [None]:^^
Default region name [None]: us-east-2
Default output format [None]: json
PS C:\Users\user> aws sts get-caller-identity
{
    "UserId": "^^",
    "Account": "^^",
    "Arn": "arn:aws:iam::^^:user/terraform-user"
}

PS C:\Users\user>
PS C:\Users\user> terraform init
Terraform initialized in an empty directory!

The directory has no Terraform configuration files. You may begin working
with Terraform immediately by creating Terraform configuration files.
PS C:\Users\user> terraform plan
╷
│ Error: No configuration files
│
│ Plan requires configuration to be present. Planning without a configuration would mark
│ everything for destruction, which is normally not what is desired. If you would like to
│ destroy everything, run plan with the -destroy option. Otherwise, create a Terraform
│ configuration file (.tf file) and try again.
╵
PS C:\Users\user> cd C:\Users\user\cloud-portfolio\3-tier-infra-terraform
PS C:\Users\user\cloud-portfolio\3-tier-infra-terraform> terraform plan
data.aws_availability_zones.available: Reading...
data.aws_availability_zones.available: Read complete after 0s [id=us-east-2]

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "main-igw"
        }
      + tags_all = {
          + "Name" = "main-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.11.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.12.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "main-vpc"
        }
      + tags_all                             = {
          + "Name" = "main-vpc"
        }
    }

Plan: 6 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to
take exactly these actions if you run "terraform apply" now.
PS C:\Users\user\cloud-portfolio\3-tier-infra-terraform> terraform init
Initializing the backend...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.98.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS C:\Users\user\cloud-portfolio\3-tier-infra-terraform> terraform plan
data.aws_availability_zones.available: Reading...
data.aws_availability_zones.available: Read complete after 0s [id=us-east-2]

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0fb653ca2d3203ac1"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "terraform-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "minimal-web"
        }
      + tags_all                             = {
          + "Name" = "minimal-web"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "main-igw"
        }
      + tags_all = {
          + "Name" = "main-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.public_rt will be created
  + resource "aws_route_table" "public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "public-rt"
        }
      + tags_all         = {
          + "Name" = "public-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.public_association[0] will be created
  + resource "aws_route_table_association" "public_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public_association[1] will be created
  + resource "aws_route_table_association" "public_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.web_sg will be created
  + resource "aws_security_group" "web_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH and HTTP"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "web-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "web-sg"
        }
      + tags_all               = {
          + "Name" = "web-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "main-vpc"
        }
      + tags_all                             = {
          + "Name" = "main-vpc"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to
take exactly these actions if you run "terraform apply" now.
PS C:\Users\user\cloud-portfolio\3-tier-infra-terraform> terraform apply
data.aws_availability_zones.available: Reading...
data.aws_availability_zones.available: Read complete after 1s [id=us-east-2]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.web will be created
  + resource "aws_instance" "web" {
      + ami                                  = "ami-0fb653ca2d3203ac1"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "terraform-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "minimal-web"
        }
      + tags_all                             = {
          + "Name" = "minimal-web"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "main-igw"
        }
      + tags_all = {
          + "Name" = "main-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.public_rt will be created
  + resource "aws_route_table" "public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "public-rt"
        }
      + tags_all         = {
          + "Name" = "public-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.public_association[0] will be created
  + resource "aws_route_table_association" "public_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public_association[1] will be created
  + resource "aws_route_table_association" "public_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.web_sg will be created
  + resource "aws_security_group" "web_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH and HTTP"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "web-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "web-sg"
        }
      + tags_all               = {
          + "Name" = "web-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "main-vpc"
        }
      + tags_all                             = {
          + "Name" = "main-vpc"
        }
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_vpc.main: Creating...
aws_vpc.main: Still creating... [10s elapsed]
aws_vpc.main: Creation complete after 12s [id=vpc-0ed919cec0f1487c9]
aws_internet_gateway.igw: Creating...
aws_subnet.public[0]: Creating...
aws_subnet.public[1]: Creating...
aws_security_group.web_sg: Creating...
aws_internet_gateway.igw: Creation complete after 1s [id=igw-0da7079bfae636ece]
aws_route_table.public_rt: Creating...
aws_route_table.public_rt: Creation complete after 1s [id=rtb-020359a4d0e465d35]
aws_security_group.web_sg: Creation complete after 2s [id=sg-00eb244a7e2ec3141]
aws_subnet.public[0]: Still creating... [10s elapsed]
aws_subnet.public[1]: Still creating... [10s elapsed]
aws_subnet.public[0]: Creation complete after 11s [id=subnet-07ed7ef28c7257f65]
aws_instance.web: Creating...
aws_subnet.public[1]: Creation complete after 13s [id=subnet-018bfaef232e53262]
aws_route_table_association.public_association[0]: Creating...
aws_route_table_association.public_association[1]: Creating...
aws_route_table_association.public_association[0]: Creation complete after 0s [id=rtbassoc-0f1e4edf66481b5e3]
aws_route_table_association.public_association[1]: Creation complete after 0s [id=rtbassoc-0860ba674ca88b969]
aws_instance.web: Still creating... [10s elapsed]
aws_instance.web: Creation complete after 13s [id=i-0d7cf0e8f3c5f7c77]

Apply complete! Resources: 9 added, 0 changed, 0 destroyed.
PS C:\Users\user\cloud-portfolio\3-tier-infra-terraform> terraform output
╷
│ Error: Variables not allowed
│
│   on outputs (2).tf line 2, in output "ec2_public_ip":
│    2:   description = Public IP of the EC2 instance
│
│ Variables may not be used here.
╵
╷
│ Error: Unsuitable value type
│
│   on outputs (2).tf line 2, in output "ec2_public_ip":
│    2:   description = Public IP of the EC2 instance
│
│ Unsuitable value: value must be known
╵
╷
│ Error: Missing newline after argument
│
│   on outputs (2).tf line 2, in output "ec2_public_ip":
│    2:   description = Public IP of the EC2 instance
│
│ An argument definition must end with a newline.
╵
PS C:\Users\user\cloud-portfolio\3-tier-infra-terraform> terraform output
╷
│ Warning: No outputs found
│
│ The state file either has no outputs defined, or all the defined outputs are empty. Please define an output in your configuration with the `output` keyword and run `terraform refresh` for
│ it to become available. If you are using interpolation, please verify the interpolated value is not empty. You can use the `terraform console` command to assist.
╵
PS C:\Users\user\cloud-portfolio\3-tier-infra-terraform> terraform refresh
data.aws_availability_zones.available: Reading...
aws_vpc.main: Refreshing state... [id=vpc-0ed919cec0f1487c9]
data.aws_availability_zones.available: Read complete after 0s [id=us-east-2]
aws_internet_gateway.igw: Refreshing state... [id=igw-0da7079bfae636ece]
aws_subnet.public[1]: Refreshing state... [id=subnet-018bfaef232e53262]
aws_subnet.public[0]: Refreshing state... [id=subnet-07ed7ef28c7257f65]
aws_security_group.web_sg: Refreshing state... [id=sg-00eb244a7e2ec3141]
aws_route_table.public_rt: Refreshing state... [id=rtb-020359a4d0e465d35]
aws_route_table_association.public_association[1]: Refreshing state... [id=rtbassoc-0860ba674ca88b969]
aws_route_table_association.public_association[0]: Refreshing state... [id=rtbassoc-0f1e4edf66481b5e3]
aws_instance.web: Refreshing state... [id=i-0d7cf0e8f3c5f7c77]

Outputs:

ec2_public_ip = "1.1.1.1"   # :)
PS C:\Users\user\cloud-portfolio\3-tier-infra-terraform> terraform output
ec2_public_ip = "1.1.1.1"
